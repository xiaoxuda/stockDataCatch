<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context 
 		http://www.springframework.org/schema/context/spring-context-2.5.xsd"
    default-autowire="byName" >

	<!-- context:annotation-config标签可以替代以下四个processor -->
    <!-- 该 BeanPostProcessor 将自动起作用，对标注 @Autowired 的 Bean 进行自动注入 -->
    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>
	<!-- 该BeanPostProcessor 将自动起作用，对标注@Resource、@PostConstruct 以及 @PreDestroy等 JSR-250 注释的Bean进行自动注入 -->
	<bean class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor"/>
	<!-- bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"/ -->	
	<!-- <bean class="org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor"/> -->
 	<!-- 包自动扫描机制，自动扫描给定位置内的注解 并提供解析器-->
	<!-- 自动扫描指定包内的注解并引入以上四个注解处理器进行注解处理，引入后无需再手工添加以上四个注解处理器bean -->
	<!-- <context:component-scan base-package="com.kimi.stockanalysis*"></context:component-scan> -->

	<!-- 环境变量配置加载 -->
	<context:property-placeholder location="classpath:com/kimi/stockanalysis/config/app-config.properties"/>

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
	    <property name="driverClassName" value="${jdbc.driverClassName}" />
	    <property name="url" value="${jdbc.url}" />
	    <property name="username" value="${jdbc.username}" />
	    <property name="password" value="${jdbc.password}" />
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	  <property name="dataSource" ref="dataSource" />
	  <property name="mapperLocations" value="classpath*:com/kimi/stockanalysis/dao/g/*Mapper.xml" />
	</bean>
	
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
	  <constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	
    <!-- enable the configuration of transactional behavior based on annotations -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- (this dependency is defined somewhere else) -->
        <property name="dataSource" ref="dataSource"/>
    </bean>
    
    <bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
    	<property name="transactionManager" ref="transactionManager"/>
    	<property name="isolationLevel" value="2"/>
    	<property name="propagationBehavior" value="0"/>
    	<property name="timeout" value="180"/>
    </bean>
    
    <bean id="transactionTemplateNew" class="org.springframework.transaction.support.TransactionTemplate">
    	<property name="transactionManager" ref="transactionManager"/>
    	<property name="isolationLevel" value="2"/>
    	<property name="propagationBehavior" value="3"/>
    	<property name="timeout" value="180"/>
    </bean>

	<!-- dao start -->
    <bean id="financailStatementDao"
        class="com.kimi.stockanalysis.dao.FinancailStatementDao">
        <property name="sqlSession" ref="sqlSession"></property>
    </bean>
    <bean id="stockInfoDao"
        class="com.kimi.stockanalysis.dao.StockInfoDao">
        <property name="sqlSession" ref="sqlSession"></property>
    </bean>
    
    <bean id="dailyTradeDetailDao"
        class="com.kimi.stockanalysis.dao.DailyTradeDetailDao">
        <property name="sqlSession" ref="sqlSession"></property>
    </bean>
    
    <!-- dao end -->
    
    <!-- service start -->
    <bean id="stockDataService"
        class="com.kimi.stockanalysis.service.StockDataService">
    </bean>
    
    <bean id="taskGenerateService"
    	class="com.kimi.stockanalysis.catcher.service.TaskGenerateService"></bean>
    
   	<bean id="catcherManageService"
    	class="com.kimi.stockanalysis.catcher.service.CatcherManageService"></bean>
    
    <bean id="taskQueueService" 
    	class="com.kimi.stockanalysis.catcher.service.TaskQueueService"></bean>
    <!-- service end -->
    
    <!-- catcher start -->
    <bean id="stockInfoCatcher"
        class="com.kimi.stockanalysis.catcher.StockInfoCatcher">
    </bean>
    
    <bean id="stockInfoDetailCatcher"
        class="com.kimi.stockanalysis.catcher.StockInfoDetailCatcher">
    </bean>
    
    <bean id="stockRealtimeTradeCatcher"
        class="com.kimi.stockanalysis.catcher.StockRealtimeTradeCatcher">
    </bean>
    
    <bean id="historyTradeDetailCatcher"
        class="com.kimi.stockanalysis.catcher.HistoryTradeDetailCatcher">
    </bean>
    
    <bean id="financailStatementCatcher"
        class="com.kimi.stockanalysis.catcher.FinancailStatementCatcher">
    </bean>
    
    <!-- catcher end -->
</beans>